Programming Todo
----------------
GameObjects and such, like Animations and such, should not be serializable, but there should be a way to pass them off to an asset constructor to turn them into something we can serialize conveniently
-Instantiate should still be a thing though
-This also makes it clear how level editors work, since we can just modify pure asset data with public get/set power
-This may actually be the way for prefabbing; have game objects keep a reference to their raw initial data (loaded into a static dic like usual) and have that generate a new instance
--If we do this, get rid of copy constructors perhaps, or at least make them all protected




Give the Sprite assets an asset ID?
-Unclear if this is needed, since we load external assets just fine, and we don't generate spritesheets inside of game objects, for exmaple, so we don't need handles to them beyond the source file
--It would be good to slap it in the interface, however, and be done with it
---It wouldn't hurt to just nab a fresh ID without bothering to store it
-DON'T FORGET TO DEAL WITH DISPOSAL AND FINALIZERS



Add ~ home support to paths
-Create a path resolver class or something so we don't have to think about this much




Make FullSource the absolute path with no shenanigans




Each game object should be its own asset file?




Add a ScriptComponent which takes a class with a public default constructor and has some nice base class or interface





Try to support instantiation all the way in the base project.
-Some base game objects require instantiation to make copy constructors
--MouseGameObject
--GameObjectLibrary
--GameObjectGroup
-To actually make this work, we may need to require all resources to be loaded from the disk, which is not great

Instantiate should return TSelf, not TSelf?
-This is only the case if we can get it working everywhere





Test if we need to add serializers to all things up the game object hierarchy or if it will be enough for gameobject and the most derived children
-TESTED: RESULT: Slap the basest converter onto every class without their own
--If you don't, you end up with the default print every thing public converter





Colliders should be serializable but collision engines should not be, or at least they shouldn't have their innards serialized, probably
-That said, there's no reason why we can't add a serializer for OctTrees and QuadTrees, since they seem like sensible data structures





Figure out a good way to serialize ShadeGameObjects
-Might be best not to do this and instead only allow 'scene' serialization
--The scene is essentially a single ShadeGameObject which is the parent of everything else, and we deserialize it, allowing us to load everything at once
---This is sensible for batch loading; we do not allow references outside the batch load when doing this
----This is also good b/c it allow us to serialize singleton game objects as well
---Need a translation dictionary, of course, so we can just serialize with whatever IDs we have and then load to new ones





Assets should only serialize in the sense of telling us where to load them from, not their data
-They can have serializers for us to serialize them, but we generally want to load them instead via Content.Load so that we reuse their data
--This implies that assets are immutable





IPrefab can provide a PostBuild method, and you should only serialize things that are IPrefab
-It can provide a Serialize method as well, and perhaps a Deserialize if we can work it