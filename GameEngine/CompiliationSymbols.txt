The following compiliation symbols and usings can be used to alter how the GameEngine project is built.
Compiliation symbols should be defined for all source code files at the compiler level using DefineConstants (i.e. Project -> Properties -> Build -> add your symbols).
Usings must be changed at a file level.

/////////////////////////////////////////////////////////////////////////////////
#define Debug
/////////////////////////////////////////////////////////////////////////////////
If this symbol is defined, then the game will draw debug information (when DrawDebugInformation in this class is set to true).
This symbol is defined automatically when building a debuggable executable.
When building for release, Release is defined instead.

Note that when drawing game objects, they may freely implement IDebugDrawable and will only draw debug information when this symbol is defined.
Otherwise, the code will be compiled but never executed, resulting only in some token wasted space.
///////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////
#define VerifyMidInitializationComponentAdds
/////////////////////////////////////////////////////////////////////////////////
If this symbol is defined, then game components that are added to the game during a RenderTargetFriendlyGame's base.Initialize call will be collected for later inspection.
After the initialization call finishes, Initialize will be called on all uninitialized late additions until there are none left.
Exceptions cannot be made for already initialized game components, as MonoGame does not expose its initialization record.
As such, take care to guard against reinitialization of game components.

This collection-inspection guards against missing game component initialization.
This happens when game components are inserted into a game's Components before the current one being processed (due to how MonoGame initializes game components) or if added at any time during LoadContent.

As a general rule, this symbol should be left defined as it is easy to accidentally create uninitialized game components.
The performance loss on a game that does not require it is token at best.
///////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////
using GameObjectIDType = BackingType;
/////////////////////////////////////////////////////////////////////////////////
GameEngine.Framework.GameObjectID
///////////////////////////////////////////////////////////
This is the backing type for ID types for GameObjects.
This value can be changed if more or fewer IDs are desired for game objects.

Changing this requires also changing the JSON converter's read in the same file.
///////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////
using RevisionType = BackingType;
/////////////////////////////////////////////////////////////////////////////////
GameEngine.Framework.RevisionID
///////////////////////////////////////////////////////////
This is the backing type for ID types for revision IDs in affine components.
This value can be changed if more or fewer revision IDs are desired.
///////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////
using ColliderIDType = BackingType;
/////////////////////////////////////////////////////////////////////////////////
GameEngine.Physics.Collision.Colliders.ColliderID
///////////////////////////////////////////////////////////
This is the backing type for ID types for IColliders.
This value can be changed if more or fewer IDs are desired for colliders.

Changing this requires also changing the JSON converter's read in the same file.
///////////////////////////////////////////////////////////